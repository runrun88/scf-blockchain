/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: jetty/9.4.44.v20210927
 * Generated at: 2025-03-09 09:30:33 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class enterpriseDetail_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("    <!DOCTYPE html>\n");
      out.write("    <html lang=\"en\">\n");
      out.write("\n");
      out.write("    <head>\n");
      out.write("        <meta charset=\"UTF-8\">\n");
      out.write("        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n");
      out.write("        <title>Enterprise Details - Supply Chain Finance</title>\n");
      out.write("        <!-- Bootstrap CSS -->\n");
      out.write("        <link href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.0/css/bootstrap.min.css\" rel=\"stylesheet\">\n");
      out.write("        <style>\n");
      out.write("            /* Custom styles */\n");
      out.write("            body {\n");
      out.write("                font-family: Arial, sans-serif;\n");
      out.write("                background-color: #f4f7fa;\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            .container {\n");
      out.write("                margin-top: 30px;\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            .menu {\n");
      out.write("                margin-bottom: 30px;\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            .menu a {\n");
      out.write("                color: #fff;\n");
      out.write("                font-size: 18px;\n");
      out.write("                margin: 0 15px;\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            .menu a:hover {\n");
      out.write("                text-decoration: underline;\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            .header {\n");
      out.write("                background-color: #007bff;\n");
      out.write("                padding: 15px;\n");
      out.write("                color: white;\n");
      out.write("                text-align: center;\n");
      out.write("                font-size: 24px;\n");
      out.write("                border-radius: 10px;\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            .footer {\n");
      out.write("                text-align: center;\n");
      out.write("                margin-top: 50px;\n");
      out.write("                font-size: 14px;\n");
      out.write("                color: #aaa;\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            .detail-panel {\n");
      out.write("                background-color: #ffffff;\n");
      out.write("                padding: 20px;\n");
      out.write("                border-radius: 10px;\n");
      out.write("                box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.1);\n");
      out.write("                margin-bottom: 20px;\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            .related-entities {\n");
      out.write("                background-color: #ffffff;\n");
      out.write("                padding: 20px;\n");
      out.write("                border-radius: 10px;\n");
      out.write("                box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.1);\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            .card {\n");
      out.write("                margin-bottom: 15px;\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            .edit-mode {\n");
      out.write("                display: none;\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            /* Updated dropdown menu styling */\n");
      out.write("            .dropdown-menu {\n");
      out.write("                background-color: #f8f9fa;\n");
      out.write("                border-radius: 5px;\n");
      out.write("                margin-top: 10px;\n");
      out.write("                box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);\n");
      out.write("                z-index: 1021;\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            .dropdown-item {\n");
      out.write("                color: #333333 !important;\n");
      out.write("                font-weight: 500;\n");
      out.write("                padding: 0.5rem 1.5rem;\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            .dropdown-item:hover {\n");
      out.write("                background-color: #007bff;\n");
      out.write("                color: white !important;\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            /* Make the dropdown visible */\n");
      out.write("            .dropdown-toggle {\n");
      out.write("                cursor: pointer;\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            .dropdown-toggle::after {\n");
      out.write("                display: inline-block;\n");
      out.write("                margin-left: 0.255em;\n");
      out.write("                vertical-align: 0.255em;\n");
      out.write("                content: \"\";\n");
      out.write("                border-top: 0.3em solid;\n");
      out.write("                border-right: 0.3em solid transparent;\n");
      out.write("                border-bottom: 0;\n");
      out.write("                border-left: 0.3em solid transparent;\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            /* Fix inline display */\n");
      out.write("            .dropdown.d-inline-block {\n");
      out.write("                vertical-align: middle;\n");
      out.write("            }\n");
      out.write("        </style>\n");
      out.write("    </head>\n");
      out.write("\n");
      out.write("    <body>\n");
      out.write("\n");
      out.write("        <!-- Header and Navigation Menu -->\n");
      out.write("        <div class=\"header\">\n");
      out.write("            <h1>Supply Chain Finance Platform</h1>\n");
      out.write("            <div class=\"menu\">\n");
      out.write("                <a href=\"index.jsp\">Home</a>\n");
      out.write("                <a href=\"#user-management\">User</a>\n");
      out.write("                <div class=\"dropdown d-inline-block\">\n");
      out.write("                    <a href=\"#\" class=\"dropdown-toggle\" id=\"enterpriseDropdown\" data-toggle=\"dropdown\"\n");
      out.write("                        aria-haspopup=\"true\" aria-expanded=\"false\">\n");
      out.write("                        Enterprise\n");
      out.write("                    </a>\n");
      out.write("                    <div class=\"dropdown-menu\" aria-labelledby=\"enterpriseDropdown\">\n");
      out.write("                        <a class=\"dropdown-item\" href=\"enterprise.jsp\">Search Enterprises</a>\n");
      out.write("                        <a class=\"dropdown-item\" href=\"singleEnterprise.jsp?mode=add\">Add New Enterprise</a>\n");
      out.write("                    </div>\n");
      out.write("                </div>\n");
      out.write("\n");
      out.write("                <a href=\"contract.jsp\">Contract</a>\n");
      out.write("                <a href=\"invoice.jsp\">Invoice</a>\n");
      out.write("            </div>\n");
      out.write("        </div>\n");
      out.write("\n");
      out.write("        <div class=\"container\">\n");
      out.write("            <!-- Enterprise Detail Section -->\n");
      out.write("            <div class=\"row\">\n");
      out.write("                <div class=\"col-12\">\n");
      out.write("                    <div class=\"detail-panel\">\n");
      out.write("                        <div class=\"d-flex justify-content-between align-items-center mb-4\">\n");
      out.write("                            <h3 id=\"pageTitle\">Enterprise Details</h3>\n");
      out.write("                            <!-- Removed Edit and Back buttons as requested -->\n");
      out.write("                        </div>\n");
      out.write("\n");
      out.write("                        <!-- Display-only view -->\n");
      out.write("                        <div id=\"viewMode\">\n");
      out.write("                            <div class=\"row\">\n");
      out.write("                                <div class=\"col-md-6\">\n");
      out.write("                                    <div class=\"form-group\">\n");
      out.write("                                        <label><strong>Enterprise ID:</strong></label>\n");
      out.write("                                        <p id=\"detailId\">-</p>\n");
      out.write("                                    </div>\n");
      out.write("                                    <div class=\"form-group\">\n");
      out.write("                                        <label><strong>Enterprise Name:</strong></label>\n");
      out.write("                                        <p id=\"detailName\">-</p>\n");
      out.write("                                    </div>\n");
      out.write("                                    <div class=\"form-group\">\n");
      out.write("                                        <label><strong>Type:</strong></label>\n");
      out.write("                                        <p id=\"detailType\">-</p>\n");
      out.write("                                    </div>\n");
      out.write("                                    <div class=\"form-group\">\n");
      out.write("                                        <label><strong>Tier:</strong></label>\n");
      out.write("                                        <p id=\"detailTier\">-</p>\n");
      out.write("                                    </div>\n");
      out.write("                                </div>\n");
      out.write("                                <div class=\"col-md-6\">\n");
      out.write("                                    <div class=\"form-group\">\n");
      out.write("                                        <label><strong>Contact Number:</strong></label>\n");
      out.write("                                        <p id=\"detailContact\">-</p>\n");
      out.write("                                    </div>\n");
      out.write("                                    <div class=\"form-group\">\n");
      out.write("                                        <label><strong>Address:</strong></label>\n");
      out.write("                                        <p id=\"detailAddress\">-</p>\n");
      out.write("                                    </div>\n");
      out.write("                                    <div class=\"form-group\">\n");
      out.write("                                        <label><strong>Memo:</strong></label>\n");
      out.write("                                        <p id=\"detailMemo\">-</p>\n");
      out.write("                                    </div>\n");
      out.write("                                </div>\n");
      out.write("                            </div>\n");
      out.write("                        </div>\n");
      out.write("                    </div>\n");
      out.write("                </div>\n");
      out.write("            </div>\n");
      out.write("\n");
      out.write("            <!-- Related Entities Section -->\n");
      out.write("            <div class=\"row\" id=\"relatedEntitiesSection\">\n");
      out.write("                <div class=\"col-12\">\n");
      out.write("                    <div class=\"related-entities\">\n");
      out.write("                        <h4 class=\"mb-4\">Related Entities</h4>\n");
      out.write("\n");
      out.write("                        <ul class=\"nav nav-tabs\" id=\"myTab\" role=\"tablist\">\n");
      out.write("                            <li class=\"nav-item\">\n");
      out.write("                                <a class=\"nav-link active\" id=\"suppliers-tab\" data-toggle=\"tab\" href=\"#suppliers\"\n");
      out.write("                                    role=\"tab\">Suppliers</a>\n");
      out.write("                            </li>\n");
      out.write("                            <li class=\"nav-item\">\n");
      out.write("                                <a class=\"nav-link\" id=\"distributors-tab\" data-toggle=\"tab\" href=\"#distributors\"\n");
      out.write("                                    role=\"tab\">Distributors</a>\n");
      out.write("                            </li>\n");
      out.write("                            <li class=\"nav-item\">\n");
      out.write("                                <a class=\"nav-link\" id=\"contracts-tab\" data-toggle=\"tab\" href=\"#contracts\"\n");
      out.write("                                    role=\"tab\">Contracts</a>\n");
      out.write("                            </li>\n");
      out.write("                        </ul>\n");
      out.write("                        <div class=\"tab-content pt-3\" id=\"myTabContent\">\n");
      out.write("                            <!-- 空的内容区域，将被JavaScript动态填充 -->\n");
      out.write("                            <div class=\"tab-pane fade show active\" id=\"suppliers\" role=\"tabpanel\">\n");
      out.write("                                <div class=\"text-center py-3\">\n");
      out.write("                                    <div class=\"spinner-border text-primary\" role=\"status\">\n");
      out.write("                                        <span class=\"sr-only\">Loading...</span>\n");
      out.write("                                    </div>\n");
      out.write("                                    <p class=\"mt-2\">Loading suppliers...</p>\n");
      out.write("                                </div>\n");
      out.write("                            </div>\n");
      out.write("                            <div class=\"tab-pane fade\" id=\"distributors\" role=\"tabpanel\">\n");
      out.write("                                <!-- 将在点击时动态加载 -->\n");
      out.write("                            </div>\n");
      out.write("                            <div class=\"tab-pane fade\" id=\"contracts\" role=\"tabpanel\">\n");
      out.write("                                <!-- 将在点击时动态加载 -->\n");
      out.write("                            </div>\n");
      out.write("                        </div>\n");
      out.write("                    </div>\n");
      out.write("                </div>\n");
      out.write("            </div>\n");
      out.write("        </div>\n");
      out.write("\n");
      out.write("        <!-- Footer -->\n");
      out.write("        <div class=\"footer\">\n");
      out.write("            <p>&copy; 2025 Supply Chain Finance Platform | All rights reserved.</p>\n");
      out.write("        </div>\n");
      out.write("\n");
      out.write("        <!-- Bootstrap and jQuery JS -->\n");
      out.write("        <script src=\"https://code.jquery.com/jquery-3.5.1.min.js\"></script>\n");
      out.write("        <script src=\"https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.3/dist/umd/popper.min.js\"></script>\n");
      out.write("        <script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.0/js/bootstrap.min.js\"></script>\n");
      out.write("        <script>\n");
      out.write("            // 变量和基础函数定义\n");
      out.write("            let isAddMode = false;\n");
      out.write("\n");
      out.write("            function getTierDisplayText(tierValue) {\n");
      out.write("                if (!tierValue && tierValue !== 0) return \"N/A\";\n");
      out.write("                return 'Tier ' + tierValue;\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            // 获取企业类型显示文本\n");
      out.write("            function getTypeDisplayText(type) {\n");
      out.write("                switch (type) {\n");
      out.write("                    case 'Core': return 'Core Enterprise';\n");
      out.write("                    case 'Bank': return 'Bank';\n");
      out.write("                    case 'Supplier': return 'Supplier';\n");
      out.write("                    case 'Distributor': return 'Distributor';\n");
      out.write("                    default: return type;\n");
      out.write("                }\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            // 加载企业详情\n");
      out.write("            function loadEnterpriseDetails() {\n");
      out.write("                // 获取URL参数\n");
      out.write("                const urlParams = new URLSearchParams(window.location.search);\n");
      out.write("                const id = urlParams.get('id');\n");
      out.write("\n");
      out.write("                if (!id) {\n");
      out.write("                    alert('No enterprise ID provided');\n");
      out.write("                    window.location.href = \"enterprise.jsp\";\n");
      out.write("                    return;\n");
      out.write("                }\n");
      out.write("\n");
      out.write("                // 从服务器获取企业数据\n");
      out.write("                $.ajax({\n");
      out.write("                    url: 'getEnterprise?id=' + id,\n");
      out.write("                    type: 'GET',\n");
      out.write("                    dataType: 'json',\n");
      out.write("                    success: function (data) {\n");
      out.write("                        if (data) {\n");
      out.write("                            // 更新查看模式\n");
      out.write("                            document.getElementById('detailId').textContent = data.enterpriseID;\n");
      out.write("                            document.getElementById('detailName').textContent = data.enterpriseName;\n");
      out.write("                            document.getElementById('detailType').textContent = getTypeDisplayText(data.role);\n");
      out.write("                            document.getElementById('detailContact').textContent = data.telephone;\n");
      out.write("                            document.getElementById('detailAddress').textContent = data.address;\n");
      out.write("                            document.getElementById('detailMemo').textContent = data.memo || '-';\n");
      out.write("                            // 修改后\n");
      out.write("const tierValue = data.tier !== null && data.tier !== undefined ? Number(data.tier) : null;\n");
      out.write("document.getElementById('detailTier').textContent = getTierDisplayText(tierValue);\n");
      out.write("\n");
      out.write("                            // 设置页面标题\n");
      out.write("                            document.title = `Enterprise Details: ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${data.enterpriseName}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write(" - Supply Chain Finance`;\n");
      out.write("                        } else {\n");
      out.write("                            alert('Enterprise not found');\n");
      out.write("                            window.location.href = \"enterprise.jsp\";\n");
      out.write("                        }\n");
      out.write("                    },\n");
      out.write("                    error: function () {\n");
      out.write("                        alert('Error loading enterprise details');\n");
      out.write("                    }\n");
      out.write("                });\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            // 格式化货币\n");
      out.write("            function formatCurrency(amount) {\n");
      out.write("                if (!amount) return 'N/A';\n");
      out.write("                return new Intl.NumberFormat('en-US', {\n");
      out.write("                    style: 'currency',\n");
      out.write("                    currency: 'USD'\n");
      out.write("                }).format(amount);\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            // 格式化日期\n");
      out.write("            function formatDate(dateStr) {\n");
      out.write("                if (!dateStr) return 'N/A';\n");
      out.write("                const date = new Date(dateStr);\n");
      out.write("                if (isNaN(date.getTime())) return dateStr; // 如果转换失败，返回原始字符串\n");
      out.write("\n");
      out.write("                return date.toLocaleDateString('en-US', {\n");
      out.write("                    year: 'numeric',\n");
      out.write("                    month: '2-digit',\n");
      out.write("                    day: '2-digit'\n");
      out.write("                });\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            // 核心功能：获取并显示供应商数据\n");
      out.write("            function fetchAndDisplaySuppliers(enterpriseId) {\n");
      out.write("                console.log(\"正在获取企业ID为\", enterpriseId, \"的供应商数据\");\n");
      out.write("                const suppliersTab = document.getElementById('suppliers');\n");
      out.write("\n");
      out.write("                if (!suppliersTab) {\n");
      out.write("                    console.error(\"未找到suppliers标签页元素\");\n");
      out.write("                    return;\n");
      out.write("                }\n");
      out.write("\n");
      out.write("                // 显示加载指示器\n");
      out.write("                suppliersTab.innerHTML = '<div class=\"text-center\"><div class=\"spinner-border text-primary\"></div><p>Loading suppliers...</p></div>';\n");
      out.write("\n");
      out.write("                // 确保标签页可见\n");
      out.write("                suppliersTab.style.cssText = 'display: block !important; opacity: 1 !important; visibility: visible !important';\n");
      out.write("\n");
      out.write("                // 使用XMLHttpRequest获取数据（避免潜在的fetch API问题）\n");
      out.write("                const xhr = new XMLHttpRequest();\n");
      out.write("                xhr.open('GET', 'getRelatedEntities?type=suppliers&id=' + enterpriseId, true);\n");
      out.write("                xhr.onreadystatechange = function () {\n");
      out.write("                    if (xhr.readyState === 4) {\n");
      out.write("                        if (xhr.status === 200) {\n");
      out.write("                            try {\n");
      out.write("                                const responseText = xhr.responseText;\n");
      out.write("                                console.log(\"服务器原始响应:\", responseText);\n");
      out.write("\n");
      out.write("                                // 处理可能的BOM标记\n");
      out.write("                                let textToParse = responseText;\n");
      out.write("                                if (textToParse.charCodeAt(0) === 0xFEFF) {\n");
      out.write("                                    textToParse = textToParse.slice(1);\n");
      out.write("                                }\n");
      out.write("\n");
      out.write("                                const data = JSON.parse(textToParse);\n");
      out.write("                                console.log(\"解析后的数据:\", data);\n");
      out.write("\n");
      out.write("                                if (!data || data.length === 0) {\n");
      out.write("                                    suppliersTab.innerHTML = '<div class=\"alert alert-info\">No suppliers found for this enterprise.</div>';\n");
      out.write("                                    return;\n");
      out.write("                                }\n");
      out.write("\n");
      out.write("                                // 使用严格的属性访问方式创建表格\n");
      out.write("                                let html = '<table class=\"table table-striped\"><thead><tr>';\n");
      out.write("                                html += '<th>ID</th><th>Name</th><th>Tier</th><th>Phone</th><th>Address</th><th>Action</th></tr></thead><tbody>';\n");
      out.write("\n");
      out.write("                                for (let i = 0; i < data.length; i++) {\n");
      out.write("                                    const supplier = data[i];\n");
      out.write("                                    // 关键修复：使用方括号访问并转换为字符串\n");
      out.write("                                    const id = String(supplier[\"enterpriseID\"] || \"\");\n");
      out.write("                                    const name = String(supplier[\"enterpriseName\"] || \"\");\n");
      out.write("                                    const tierValue = Number(supplier[\"tier\"]) ;\n");
      out.write("                                    const phone = String(supplier[\"telephone\"] || \"\");\n");
      out.write("                                    const addr = String(supplier[\"address\"] || \"\");\n");
      out.write("\n");
      out.write("                                    html += '<tr>';\n");
      out.write("                                    html += '<td>' + id + '</td>';\n");
      out.write("                                    html += '<td>' + name + '</td>';\n");
      out.write("                                    html += '<td>' + getTierDisplayText(tierValue) + '</td>';\n");
      out.write("                                    html += '<td>' + phone + '</td>';\n");
      out.write("                                    html += '<td>' + addr + '</td>';\n");
      out.write("                                    html += '<td><a class=\"btn btn-sm btn-primary\" href=\"enterpriseDetail.jsp?id=' + id + '\">View</a></td>';\n");
      out.write("                                    html += '</tr>';\n");
      out.write("                                }\n");
      out.write("\n");
      out.write("                                html += '</tbody></table>';\n");
      out.write("                                suppliersTab.innerHTML = html;\n");
      out.write("\n");
      out.write("                                console.log(\"供应商数据加载成功，表格已渲染\");\n");
      out.write("                            } catch (e) {\n");
      out.write("                                console.error(\"解析或渲染数据时出错:\", e);\n");
      out.write("                                suppliersTab.innerHTML = '<div class=\"alert alert-danger\">Error processing data: ' + e.message + '</div>';\n");
      out.write("                            }\n");
      out.write("                        } else {\n");
      out.write("                            console.error(\"HTTP请求失败:\", xhr.status);\n");
      out.write("                            suppliersTab.innerHTML = '<div class=\"alert alert-danger\">Failed to load suppliers data. Status: ' + xhr.status + '</div>';\n");
      out.write("                        }\n");
      out.write("                    }\n");
      out.write("                };\n");
      out.write("                xhr.onerror = function () {\n");
      out.write("                    suppliersTab.innerHTML = '<div class=\"alert alert-danger\">Network error when loading suppliers data</div>';\n");
      out.write("                };\n");
      out.write("                xhr.send();\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            // 核心功能：获取并显示经销商数据\n");
      out.write("            function fetchAndDisplayDistributors(enterpriseId) {\n");
      out.write("                console.log(\"正在获取企业ID为\", enterpriseId, \"的经销商数据\");\n");
      out.write("                const distributorsTab = document.getElementById('distributors');\n");
      out.write("\n");
      out.write("                if (!distributorsTab) {\n");
      out.write("                    console.error(\"未找到distributors标签页元素\");\n");
      out.write("                    return;\n");
      out.write("                }\n");
      out.write("\n");
      out.write("                // 显示加载指示器\n");
      out.write("                distributorsTab.innerHTML = '<div class=\"text-center\"><div class=\"spinner-border text-primary\"></div><p>Loading distributors...</p></div>';\n");
      out.write("\n");
      out.write("                // 确保标签页可见\n");
      out.write("                distributorsTab.style.cssText = 'display: block !important; opacity: 1 !important; visibility: visible !important';\n");
      out.write("\n");
      out.write("                // 使用XMLHttpRequest获取数据（避免潜在的fetch API问题）\n");
      out.write("                const xhr = new XMLHttpRequest();\n");
      out.write("                xhr.open('GET', 'getRelatedEntities?type=distributors&id=' + enterpriseId, true);\n");
      out.write("                xhr.onreadystatechange = function () {\n");
      out.write("                    if (xhr.readyState === 4) {\n");
      out.write("                        if (xhr.status === 200) {\n");
      out.write("                            try {\n");
      out.write("                                const responseText = xhr.responseText;\n");
      out.write("                                console.log(\"服务器原始响应(经销商):\", responseText);\n");
      out.write("\n");
      out.write("                                // 处理可能的BOM标记\n");
      out.write("                                let textToParse = responseText;\n");
      out.write("                                if (textToParse.charCodeAt(0) === 0xFEFF) {\n");
      out.write("                                    textToParse = textToParse.slice(1);\n");
      out.write("                                }\n");
      out.write("\n");
      out.write("                                const data = JSON.parse(textToParse);\n");
      out.write("                                console.log(\"解析后的经销商数据:\", data);\n");
      out.write("\n");
      out.write("                                if (!data || data.length === 0) {\n");
      out.write("                                    distributorsTab.innerHTML = '<div class=\"alert alert-info\">No distributors found for this enterprise.</div>';\n");
      out.write("                                    return;\n");
      out.write("                                }\n");
      out.write("\n");
      out.write("                                // 使用严格的属性访问方式创建表格\n");
      out.write("                                let html = '<table class=\"table table-striped\"><thead><tr>';\n");
      out.write("                                html += '<th>ID</th><th>Name</th><th>Tier</th><th>Phone</th><th>Address</th><th>Action</th></tr></thead><tbody>';\n");
      out.write("\n");
      out.write("                                for (let i = 0; i < data.length; i++) {\n");
      out.write("                                    const distributor = data[i];\n");
      out.write("                                    // 关键修复：使用方括号访问并转换为字符串\n");
      out.write("                                    const id = String(distributor[\"enterpriseID\"] || \"\");\n");
      out.write("                                    const name = String(distributor[\"enterpriseName\"] || \"\");\n");
      out.write("                                    const tier = Number(distributor[\"tier\"]);\n");
      out.write("                                    const phone = String(distributor[\"telephone\"] || \"\");\n");
      out.write("                                    const addr = String(distributor[\"address\"] || \"\");\n");
      out.write("\n");
      out.write("                                    html += '<tr>';\n");
      out.write("                                    html += '<td>' + id + '</td>';\n");
      out.write("                                    html += '<td>' + name + '</td>';\n");
      out.write("                                    html += '<td>Tier ' + tier + '</td>';\n");
      out.write("                                    html += '<td>' + phone + '</td>';\n");
      out.write("                                    html += '<td>' + addr + '</td>';\n");
      out.write("                                    html += '<td><a class=\"btn btn-sm btn-primary\" href=\"enterpriseDetail.jsp?id=' + id + '\">View</a></td>';\n");
      out.write("                                    html += '</tr>';\n");
      out.write("                                }\n");
      out.write("\n");
      out.write("                                html += '</tbody></table>';\n");
      out.write("                                distributorsTab.innerHTML = html;\n");
      out.write("\n");
      out.write("                                console.log(\"经销商数据加载成功，表格已渲染\");\n");
      out.write("                            } catch (e) {\n");
      out.write("                                console.error(\"解析或渲染经销商数据时出错:\", e);\n");
      out.write("                                distributorsTab.innerHTML = '<div class=\"alert alert-danger\">Error processing data: ' + e.message + '</div>';\n");
      out.write("                            }\n");
      out.write("                        } else {\n");
      out.write("                            console.error(\"HTTP请求失败:\", xhr.status);\n");
      out.write("                            distributorsTab.innerHTML = '<div class=\"alert alert-danger\">Failed to load distributors data. Status: ' + xhr.status + '</div>';\n");
      out.write("                        }\n");
      out.write("                    }\n");
      out.write("                };\n");
      out.write("                xhr.onerror = function () {\n");
      out.write("                    distributorsTab.innerHTML = '<div class=\"alert alert-danger\">Network error when loading distributors data</div>';\n");
      out.write("                };\n");
      out.write("                xhr.send();\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            // 核心功能：获取并显示合同数据\n");
      out.write("            function fetchAndDisplayContracts(enterpriseId) {\n");
      out.write("                console.log(\"正在获取企业ID为\", enterpriseId, \"的合同数据\");\n");
      out.write("                const contractsTab = document.getElementById('contracts');\n");
      out.write("\n");
      out.write("                if (!contractsTab) {\n");
      out.write("                    console.error(\"未找到contracts标签页元素\");\n");
      out.write("                    return;\n");
      out.write("                }\n");
      out.write("\n");
      out.write("                // 显示加载指示器\n");
      out.write("                contractsTab.innerHTML = '<div class=\"text-center\"><div class=\"spinner-border text-primary\"></div><p>Loading contracts...</p></div>';\n");
      out.write("\n");
      out.write("                // 确保标签页可见\n");
      out.write("                contractsTab.style.cssText = 'display: block !important; opacity: 1 !important; visibility: visible !important';\n");
      out.write("\n");
      out.write("                // 使用XMLHttpRequest获取数据\n");
      out.write("                const xhr = new XMLHttpRequest();\n");
      out.write("                xhr.open('GET', 'getRelatedEntities?type=contracts&id=' + enterpriseId, true);\n");
      out.write("                xhr.onreadystatechange = function () {\n");
      out.write("                    if (xhr.readyState === 4) {\n");
      out.write("                        if (xhr.status === 200) {\n");
      out.write("                            try {\n");
      out.write("                                const responseText = xhr.responseText;\n");
      out.write("                                console.log(\"服务器原始响应(合同):\", responseText);\n");
      out.write("\n");
      out.write("                                // 处理可能的BOM标记\n");
      out.write("                                let textToParse = responseText;\n");
      out.write("                                if (textToParse.charCodeAt(0) === 0xFEFF) {\n");
      out.write("                                    textToParse = textToParse.slice(1);\n");
      out.write("                                }\n");
      out.write("\n");
      out.write("                                const data = JSON.parse(textToParse);\n");
      out.write("                                console.log(\"解析后的合同数据:\", data);\n");
      out.write("\n");
      out.write("                                if (!data || data.length === 0) {\n");
      out.write("                                    contractsTab.innerHTML = '<div class=\"alert alert-info\">No contracts found for this enterprise.</div>';\n");
      out.write("                                    return;\n");
      out.write("                                }\n");
      out.write("\n");
      out.write("                                // 使用严格的属性访问方式创建表格\n");
      out.write("                                let html = '<table class=\"table table-striped\"><thead><tr>';\n");
      out.write("                                html += '<th>Contract ID</th><th>Real No.</th><th>Amount</th><th>Date</th><th>Status</th><th>Action</th></tr></thead><tbody>';\n");
      out.write("\n");
      out.write("                                for (let i = 0; i < data.length; i++) {\n");
      out.write("                                    const contract = data[i];\n");
      out.write("                                    // 关键修复：使用方括号访问并转换为字符串\n");
      out.write("                                    const id = String(contract[\"contractID\"] || \"\");\n");
      out.write("                                    const number = String(contract[\"contractNumber\"] || \"N/A\");\n");
      out.write("\n");
      out.write("                                    // 使用安全的格式化方法处理金额和日期\n");
      out.write("                                    let formattedAmount = 'N/A';\n");
      out.write("                                    try {\n");
      out.write("                                        if (contract[\"contractAmount\"]) {\n");
      out.write("                                            formattedAmount = formatCurrency(contract[\"contractAmount\"]);\n");
      out.write("                                        }\n");
      out.write("                                    } catch (e) {\n");
      out.write("                                        console.error(\"格式化金额时出错:\", e);\n");
      out.write("                                    }\n");
      out.write("\n");
      out.write("                                    let formattedDate = 'N/A';\n");
      out.write("                                    try {\n");
      out.write("                                        if (contract[\"contractDate\"]) {\n");
      out.write("                                            formattedDate = formatDate(contract[\"contractDate\"]);\n");
      out.write("                                        }\n");
      out.write("                                    } catch (e) {\n");
      out.write("                                        console.error(\"格式化日期时出错:\", e);\n");
      out.write("                                    }\n");
      out.write("\n");
      out.write("                                    const status = String(contract[\"status\"] || \"Active\");\n");
      out.write("\n");
      out.write("                                    html += '<tr>';\n");
      out.write("                                    html += '<td>' + id + '</td>';\n");
      out.write("                                    html += '<td>' + number + '</td>';\n");
      out.write("                                    html += '<td>' + formattedAmount + '</td>';\n");
      out.write("                                    html += '<td>' + formattedDate + '</td>';\n");
      out.write("                                    html += '<td>' + status + '</td>';\n");
      out.write("                                    html += '<td><a class=\"btn btn-sm btn-info\" href=\"contractDetail.jsp?id=' + id + '\">View</a></td>';\n");
      out.write("                                    html += '</tr>';\n");
      out.write("                                }\n");
      out.write("\n");
      out.write("                                html += '</tbody></table>';\n");
      out.write("                                contractsTab.innerHTML = html;\n");
      out.write("\n");
      out.write("                                console.log(\"合同数据加载成功，表格已渲染\");\n");
      out.write("                            } catch (e) {\n");
      out.write("                                console.error(\"解析或渲染合同数据时出错:\", e);\n");
      out.write("                                contractsTab.innerHTML = '<div class=\"alert alert-danger\">Error processing data: ' + e.message + '</div>';\n");
      out.write("                            }\n");
      out.write("                        } else {\n");
      out.write("                            console.error(\"HTTP请求失败:\", xhr.status);\n");
      out.write("                            contractsTab.innerHTML = '<div class=\"alert alert-danger\">Failed to load contracts data. Status: ' + xhr.status + '</div>';\n");
      out.write("                        }\n");
      out.write("                    }\n");
      out.write("                };\n");
      out.write("                xhr.onerror = function () {\n");
      out.write("                    contractsTab.innerHTML = '<div class=\"alert alert-danger\">Network error when loading contracts data</div>';\n");
      out.write("                };\n");
      out.write("                xhr.send();\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            // 文档就绪函数 - 初始化页面\n");
      out.write("            $(document).ready(function () {\n");
      out.write("                console.log(\"页面加载 - 初始化\");\n");
      out.write("                // 确保初始状态下只有suppliers标签页是活动的\n");
      out.write("                $('.tab-pane').not('#suppliers').removeClass('active show');\n");
      out.write("\n");
      out.write("                // 1. 加载企业详情\n");
      out.write("                loadEnterpriseDetails();\n");
      out.write("\n");
      out.write("                // 2. 初始化下拉菜单\n");
      out.write("                $('.dropdown-toggle').dropdown();\n");
      out.write("\n");
      out.write("                // 3. 添加悬停效果处理\n");
      out.write("                $('.dropdown').hover(\n");
      out.write("                    function () {\n");
      out.write("                        $(this).find('.dropdown-menu').stop(true, true).delay(100).fadeIn(100);\n");
      out.write("                    },\n");
      out.write("                    function () {\n");
      out.write("                        $(this).find('.dropdown-menu').stop(true, true).delay(100).fadeOut(100);\n");
      out.write("                    }\n");
      out.write("                );\n");
      out.write("\n");
      out.write("                // 4. 标签切换处理 - 解决内容叠加问题\n");
      out.write("                $('#myTab a').on('click', function (e) {\n");
      out.write("                    e.preventDefault(); // 阻止默认行为\n");
      out.write("\n");
      out.write("                    // 获取点击的标签和目标内容区ID\n");
      out.write("                    const $this = $(this);\n");
      out.write("                    const tabHref = $this.attr('href');\n");
      out.write("                    const tabId = tabHref.substring(1); // 去掉开头的#\n");
      out.write("\n");
      out.write("                    console.log(\"点击标签页: \" + tabId);\n");
      out.write("\n");
      out.write("                    // 移除所有标签的激活状态\n");
      out.write("                    $('#myTab a').removeClass('active');\n");
      out.write("                    $this.addClass('active');\n");
      out.write("\n");
      out.write("                    // 隐藏所有标签内容\n");
      out.write("                    $('.tab-pane').removeClass('active show').hide();\n");
      out.write("\n");
      out.write("                    // 仅显示当前标签内容\n");
      out.write("                    $(tabHref).addClass('active show').show();\n");
      out.write("\n");
      out.write("                    // 获取URL中的企业ID\n");
      out.write("                    const urlParams = new URLSearchParams(window.location.search);\n");
      out.write("                    const enterpriseId = urlParams.get('id');\n");
      out.write("\n");
      out.write("                    if (!enterpriseId) return;\n");
      out.write("\n");
      out.write("                    // 根据不同的标签页加载相应数据\n");
      out.write("                    if (tabId === 'suppliers') {\n");
      out.write("                        fetchAndDisplaySuppliers(enterpriseId);\n");
      out.write("                    } else if (tabId === 'distributors') {\n");
      out.write("                        fetchAndDisplayDistributors(enterpriseId);\n");
      out.write("                    } else if (tabId === 'contracts') {\n");
      out.write("                        fetchAndDisplayContracts(enterpriseId);\n");
      out.write("                    }\n");
      out.write("                });\n");
      out.write("\n");
      out.write("                // 5. 获取URL中的企业ID\n");
      out.write("                const urlParams = new URLSearchParams(window.location.search);\n");
      out.write("                const enterpriseId = urlParams.get('id');\n");
      out.write("\n");
      out.write("                // 6. 强制显示suppliers标签页内容\n");
      out.write("                if (enterpriseId) {\n");
      out.write("                    // 添加CSS样式，但改为只显示激活的标签\n");
      out.write("                    const style = document.createElement('style');\n");
      out.write("                    style.type = 'text/css';\n");
      out.write("                    style.innerHTML = `\n");
      out.write("                    /* 确保只有激活的标签页可见 */\n");
      out.write("                    .tab-pane.active {\n");
      out.write("                        display: block !important; \n");
      out.write("                        opacity: 1 !important;\n");
      out.write("                        visibility: visible !important;\n");
      out.write("                    }\n");
      out.write("                    \n");
      out.write("                    /* 确保非激活标签页隐藏 */\n");
      out.write("                    .tab-pane:not(.active) {\n");
      out.write("                        display: none !important;\n");
      out.write("                        opacity: 0 !important;\n");
      out.write("                    }\n");
      out.write("                    \n");
      out.write("                    /* 确保suppliers标签按钮初始状态看起来是激活的 */\n");
      out.write("                    #suppliers-tab {\n");
      out.write("                        color: #007bff !important;\n");
      out.write("                        background-color: #fff !important;\n");
      out.write("                        border-color: #dee2e6 #dee2e6 #fff !important;\n");
      out.write("                    }\n");
      out.write("                `;\n");
      out.write("                    document.head.appendChild(style);\n");
      out.write("\n");
      out.write("                    // 延迟加载供应商数据，确保DOM已准备好\n");
      out.write("                    setTimeout(function () {\n");
      out.write("                        console.log(\"加载供应商数据...\");\n");
      out.write("                        fetchAndDisplaySuppliers(enterpriseId);\n");
      out.write("                    }, 500);\n");
      out.write("                }\n");
      out.write("\n");
      out.write("                // 7. 移除页面上所有不必要的临时解决方案容器\n");
      out.write("                setTimeout(function () {\n");
      out.write("                    const elementsToRemove = [\n");
      out.write("                        document.querySelector('.card.mt-4.border-danger'), // Emergency Fix\n");
      out.write("                        document.getElementById('ultimate_fix'),            // Ultimate Fix\n");
      out.write("                        document.getElementById('direct_suppliers_container') // Direct View\n");
      out.write("                    ];\n");
      out.write("\n");
      out.write("                    elementsToRemove.forEach(el => {\n");
      out.write("                        if (el) el.parentNode.removeChild(el);\n");
      out.write("                    });\n");
      out.write("                }, 3000); // 给足够的时间让页面完全加载\n");
      out.write("            });\n");
      out.write("        </script>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
